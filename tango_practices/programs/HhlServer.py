#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        HhlServer.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      huiling.he$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["HhlServer", "HhlServerClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(HhlServer.additionnal_import) ENABLED START -----#
from socketAPI import TopCtrl
from PyTango.server import device_property, class_property
#----- PROTECTED REGION END -----#	//	HhlServer.additionnal_import

# Device States Description
# No states for this device


class HhlServer (PyTango.Device_4Impl):
    """Socket"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(HhlServer.global_variables) ENABLED START -----#
  
    #----- PROTECTED REGION END -----#	//	HhlServer.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        HhlServer.init_device(self)
        #----- PROTECTED REGION ID(HhlServer.__init__) ENABLED START -----#
        
        
        #----- PROTECTED REGION END -----#	//	HhlServer.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(HhlServer.delete_device) ENABLED START -----#
      
        #----- PROTECTED REGION END -----#	//	HhlServer.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Position_read = 0.0
        self.attr_Port_read = 0
        self.attr_Host_read = ""
        #----- PROTECTED REGION ID(HhlServer.init_device) ENABLED START -----#      
        self.attr_Host_read = "localhost"     
        self.attr_Port_read = 9999
        self.topCtrl = TopCtrl(self.attr_Host_read, self.attr_Port_read)
       
        #----- PROTECTED REGION END -----#	//	HhlServer.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(HhlServer.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HhlServer.always_executed_hook

    # -------------------------------------------------------------------------
    #    HhlServer read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Position(self, attr):
        self.debug_stream("In read_Position()")
        #----- PROTECTED REGION ID(HhlServer.Position_read) ENABLED START -----#
        topCtrl = self.topCtrl      
        ans = topCtrl.get_position()   
        attr.set_value(ans)
        #attr.set_value(self.attr_Position_read)  
            
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(HhlServer.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HhlServer.read_attr_hardware
        
    def read_Port(self, attr):
        self.debug_stream("In read_Port()")
        #----- PROTECTED REGION ID(HhlServer.Port_read) ENABLED START -----#
        attr.set_value(self.attr_Port_read)
        
        #----- PROTECTED REGION END -----#	//	HhlServer.Port_read
        
    def read_Host(self, attr):
        self.debug_stream("In read_Host()")
        #----- PROTECTED REGION ID(HhlServer.Host_read) ENABLED START -----#
        self.attr_Host_read = "134.30.210.74"
        attr.set_value(self.attr_Host_read)
        
        #----- PROTECTED REGION END -----#	//	HhlServer.Host_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(HhlServer.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HhlServer.read_attr_hardware


    # -------------------------------------------------------------------------
    #    HhlServer command methods
    # -------------------------------------------------------------------------
    
    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(HhlServer.State) ENABLED START -----#    
        topCtrl = self.topCtrl
        argout = topCtrl.get_state()     
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
            argout = PyTango.DevState.ON
        return argout
  
        #----- PROTECTED REGION END -----#	//	HhlServer.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()
        
    def dev_status(self):
        """ This command gets the device status (stored in its device_status data member) and returns it to the caller.
        :return: Device status
        :rtype: PyTango.ConstDevString
        """
        self.debug_stream("In dev_status()")
        argout = ""
        #----- PROTECTED REGION ID(HhlServer.Status) ENABLED START -----#
        topCtrl = self.topCtrl
        ans = topCtrl.get_status()      
        return ans
    
#----- PROTECTED REGION END -----#	//	HhlServer.Status
        self.set_status(self.argout)
        self.__status = PyTango.Device_4Impl.dev_status(self)
        return self.__status
        
    def Stop(self):
        """ 
        """
        self.debug_stream("In Stop()")
        #----- PROTECTED REGION ID(HhlServer.Stop) ENABLED START -----#
        topCtrl = self.topCtrl
        topCtrl.stop()
        
        #----- PROTECTED REGION END -----#	//	HhlServer.Stop
        
    def GetAcceleration(self):
        """ 
        :rtype: PyTango.DevFloat
        """
        self.debug_stream("In GetAcceleration()")
        argout = 0.0
        #----- PROTECTED REGION ID(HhlServer.GetAcceleration) ENABLED START -----#    
        topCtrl = self.topCtrl     
        v = topCtrl.getAxisPar( "acceleration")   
        if argout != v:
            argout = v
            
        #----- PROTECTED REGION END -----#	//	HhlServer.GetAcceleration
        return argout
        
    def SetAcceleration(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevFloat
        :rtype: PyTango.DevString
        """
        self.debug_stream("In SetAcceleration()")
        argout = ""
        #----- PROTECTED REGION ID(HhlServer.SetAcceleration) ENABLED START -----#
        topCtrl = self.topCtrl
        ans = topCtrl.setAxisPar("acceleration", argin)
        
        #----- PROTECTED REGION END -----#	//	HhlServer.SetAcceleration     
        return argout
        
    def GetVelocity(self):
        """ 
        :rtype: PyTango.DevFloat
        """
        self.debug_stream("In GetVelocity()")
        argout = 0.0
        #----- PROTECTED REGION ID(HhlServer.GetVelocity) ENABLED START -----#
        topCtrl = self.topCtrl
        v = topCtrl.getAxisPar("velocity")
        if argout != v:
            argout = v
        #----- PROTECTED REGION END -----#	//	HhlServer.GetVelocity
        return argout
        
    def SetVelocity(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevFloat
        :rtype: PyTango.DevString
        """
        self.debug_stream("In SetVelocity()")
        argout = ""
        #----- PROTECTED REGION ID(HhlServer.SetVelocity) ENABLED START -----#
        topCtrl = self.topCtrl
        ans = topCtrl.setAxisPar("velocity", argin)
        
        #----- PROTECTED REGION END -----#	//	HhlServer.SetVelocity
        return argout
        
    def Reconnect(self):
        """ 
        """
        self.debug_stream("In Reconnect()")
        #----- PROTECTED REGION ID(HhlServer.Reconnect) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HhlServer.Reconnect
        
    def GetPosition(self):
        """ 
        :rtype: PyTango.DevFloat
        """
        self.debug_stream("In GetPosition()")
        argout = 0.0
        #----- PROTECTED REGION ID(HhlServer.GetPosition) ENABLED START -----#
        topCtrl = self.topCtrl
        argout = topCtrl.get_position()      
        #----- PROTECTED REGION END -----#	//	HhlServer.GetPosition
        return argout
        
    def SetPosition(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevFloat
        :rtype: PyTango.DevBoolean
        """
        self.debug_stream("In SetPosition()")
        argout = False
        #----- PROTECTED REGION ID(HhlServer.SetPosition) ENABLED START -----#
        topCtrl = self.topCtrl
        topCtrl.moveMotor(argin)
        argout = True
        #----- PROTECTED REGION END -----#	//	HhlServer.SetPosition
        return argout
    
    def GetId(self):
        dev = DeviceProxy(self)
        a = dev.get_property('id')
        return a
    def move(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevFloat
        """
        self.debug_stream("In move()")
        #----- PROTECTED REGION ID(HhlServer.move) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HhlServer.move
        

    #----- PROTECTED REGION ID(HhlServer.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	HhlServer.programmer_methods

class HhlServerClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(HhlServer.global_class_variables) ENABLED START -----#
   
    #----- PROTECTED REGION END -----#	//	HhlServer.global_class_variables


    #    Class Properties
    class_property_list = {
        'socket':
            [PyTango.DevString, 
             '',
            [] ],
        }


    #    Device Properties
    device_property_list = {
        'Hostname':
            [PyTango.DevString, 
             '',
            ["localhost"] ],
        'Port':
            [PyTango.DevLong, 
             '',
            [9999]],
        'Readtimeout':
            [PyTango.DevShort, 
             '',
            [4000]],
        'AutoReconnect':
            [PyTango.DevBoolean, 
             '',
            [False]],
        }


    #    Command definitions
    cmd_list = {
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'GetAcceleration':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevFloat, "none"]],
        'SetAcceleration':
            [[PyTango.DevFloat, "none"],
            [PyTango.DevString, "none"]],
        'GetVelocity':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevFloat, "none"]],
        'SetVelocity':
            [[PyTango.DevFloat, "none"],
            [PyTango.DevString, "none"]],
        'Reconnect':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'GetPosition':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevFloat, "none"]],
        'SetPosition':
            [[PyTango.DevFloat, "none"],
            [PyTango.DevBoolean, "none"]],
        'move':
            [[PyTango.DevFloat, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Position':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Port':
            [[PyTango.DevLong64,
            PyTango.SCALAR,
            PyTango.READ]],
        'Host':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(HhlServerClass, HhlServer, 'HhlServer')
        #----- PROTECTED REGION ID(HhlServer.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	HhlServer.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
