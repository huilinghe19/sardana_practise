#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        CopleyControl.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      null$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["CopleyControl", "CopleyControlClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(CopleyControl.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	CopleyControl.additionnal_import

# Device States Description
# No states for this device


class CopleyControl (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControl.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        CopleyControl.init_device(self)
        #----- PROTECTED REGION ID(CopleyControl.__init__) ENABLED START -----#
          
        #----- PROTECTED REGION END -----#	//	CopleyControl.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(CopleyControl.delete_device) ENABLED START -----#
              
        #----- PROTECTED REGION END -----#	//	CopleyControl.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Port_read = ""
        self.attr_Acceleration_read = 0.0
        self.attr_Position_read = 0.0
        self.attr_Velocity_read = 0.0
        self.attr_NodeID_read = 0
        self.attr_NodeID_write = 0
        self.attr_Deceleration_read = 0.0
        #----- PROTECTED REGION ID(CopleyControl.init_device) ENABLED START -----#  
        print "In ", self.get_name(), "::init_device()"
        self.connectSerial()                                 
        self.set_state(PyTango.DevState.STANDBY)      
        self.dev =  PyTango.DeviceProxy("pyserial/hhl/1")            
        self.attr_Port_read = "/dev/ttyS0"  
        self.attr_NodeID_read = 0
        self.attr_Acceleration_read = 200000
        self.attr_Deceleration_read = 200000
        self.attr_Velocity_read = 7000
        self.Write('s r0x24 31\n s r0xC8 257\n')
        #----- PROTECTED REGION END -----#	//	Cself.attr_Timeout_read = 0opleyControl.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(CopleyControl.always_executed_hook) ENABLED START -----#
        print "In ", self.get_name(), "::always_excuted_hook()"
        #----- PROTECTED REGION END -----#	//	CopleyControl.always_executed_hook

    # -------------------------------------------------------------------------
    #    CopleyControl read/write attribute methods
    # -------------------------------------------------------------------------
    def connectSerial(self):                            
        dev = PyTango.DeviceProxy("pyserial/hhl/1")            
        if dev.State() == PyTango.DevState.OFF:
            dev.Open()
        else:
            pass
        
    def read_Port(self, attr):
        self.debug_stream("In read_Port()")
        #----- PROTECTED REGION ID(CopleyControl.Port_read) ENABLED START -----#
        attr.set_value(self.attr_Port_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Port_read
        
    def write_Port(self, attr):
        self.debug_stream("In write_Port()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Port_write) ENABLED START -----#
        self.attr_Port_write = data
        #----- PROTECTED REGION END -----#	//	CopleyControl.Port_write
        
    def read_Acceleration(self, attr):
        self.debug_stream("In read_Acceleration()")
        #----- PROTECTED REGION ID(CopleyControl.Acceleration_read) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command = self.getParameterCommand(nodeID, "g r0xcc")
        attr_Acceleration_read =  self.SendCommandGetResult(command)
        if attr_Acceleration_read != '':
            attr.set_value(int(attr_Acceleration_read))
      
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Acceleration_read
        
    def write_Acceleration(self, attr):
        self.debug_stream("In write_Acceleration()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Acceleration_write) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command = self.setParameterCommand(nodeID, "s r0xcc", data)
        self.SendCommandGetResult(command)   
        #----- PROTECTED REGION END -----#	//	CopleyControl.Acceleration_write
        
   
    def read_Position(self, attr):
        self.debug_stream("In read_Position()")
        #----- PROTECTED REGION ID(CopleyControl.Position_read) ENABLED START -----#        
        nodeID = self.attr_NodeID_write
        command = self.getParameterCommand(nodeID, "g r0xca")
        attr_Position_read =  self.SendCommandGetResult(command)
        if attr_Position_read != '':
            attr.set_value(int(attr_Position_read))
     
        #----- PROTECTED REGION END -----#	//	CopleyControl.Position_read
        
    def write_Position(self, attr):
        self.debug_stream("In write_Position()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Position_write) ENABLED START -----#
        #self.attr_Position_write = data    
        nodeID = self.attr_NodeID_write
        command = self.setParameterCommand(nodeID, "s r0xca", data)
        self.SendCommandGetResult(command)    

      
        #----- PROTECTED REGION END -----#	//	CopleyControl.Position_write
        
    def read_Velocity(self, attr):
        self.debug_stream("In read_Velocity()")
        #----- PROTECTED REGION ID(CopleyControl.Velocity_read) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command = self.getParameterCommand(nodeID, "g r0xca")
        attr_Velocity_read =  self.SendCommandGetResult(command)
        if attr_Velocity_read != '':
            attr.set_value(int(attr_Velocity_read))

        #----- PROTECTED REGION END -----#	//	CopleyControl.Velocity_read
        
    def write_Velocity(self, attr):
        self.debug_stream("In write_Velocity()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Velocity_write) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command = self.setParameterCommand(nodeID, "s r0xcb", data)
        self.SendCommandGetResult(command)    

    
        #----- PROTECTED REGION END -----#	//	CopleyControl.Velocity_write
        
    def setParameterCommand(self, nodeID, command, data):
        if nodeID == 0:
            return '{} {}\n'.format(command, str(int(data)))
        else:
            return '{} {} {}\n'.format(str(int(nodeID)), command, str(int(data)))
            
    def getParameterCommand(self, nodeID, command):
        if nodeID == 0:
            return '{}\n'.format(command)
        else:
            return '{} {} {}\n'.format(str(int(nodeID)), command)
            
    def read_NodeID(self, attr):
        self.debug_stream("In read_NodeID()")
        #----- PROTECTED REGION ID(CopleyControl.NodeID_read) ENABLED START -----#
        attr.set_value(self.attr_NodeID_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.NodeID_read
        
    def write_NodeID(self, attr):
        self.debug_stream("In write_NodeID()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.NodeID_write) ENABLED START -----#
        self.attr_NodeID_write = data
        #----- PROTECTED REGION END -----#	//	CopleyControl.NodeID_write
        
    def read_Deceleration(self, attr):
        self.debug_stream("In read_Deceleration()")
        #----- PROTECTED REGION ID(CopleyControl.Deceleration_read) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command = self.getParameterCommand(nodeID, "g r0xcd")
        attr_Deceleration_read =  self.SendCommandGetResult(command)
        if attr_Deceleration_read != '':
            attr.set_value(int(attr_Deceleration_read))
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Deceleration_read
        
    def write_Deceleration(self, attr):
        self.debug_stream("In write_Deceleration()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Deceleration_write) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command = self.setParameterCommand(nodeID, "s r0xcd", data)
        self.SendCommandGetResult(command)   
        #----- PROTECTED REGION END -----#	//	CopleyControl.Deceleration_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(CopleyControl.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.read_attr_hardware


    # -------------------------------------------------------------------------
    #    CopleyControl command methods
    # -------------------------------------------------------------------------
  
     
            
    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(CopleyControl.State) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command_DriveEventStatus = self.getParameterCommand(nodeID, "g r0xa0")        
        DriveEventStatus = self.SendCommandGetResult(command_DriveEventStatus)  
        if DriveEventStatus == '':
            argout = PyTango.DevState.ON
        elif DriveEventStatus != '0' and DriveEventStatus != '':
            argout = PyTango.DevState.MOVING   
        else:
            argout = PyTango.DevState.STANDBY
        self.set_state(argout)
        #----- PROTECTED REGION END -----#	//	CopleyControl.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()
        
    def dev_status(self):
        """ This command gets the device status (stored in its device_status data member) and returns it to the caller.
        :return: Device status
        :rtype: PyTango.ConstDevString
        """
        self.debug_stream("In dev_status()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.Status) ENABLED START -----#
        nodeID = self.attr_NodeID_write
        command_DriveEventStatus = self.getParameterCommand(nodeID, "g r0xa0")

        DriveEventStatus = self.SendCommandGetResult(command_DriveEventStatus)   
        if DriveEventStatus == '':
            argout = "Status is ON"
        if DriveEventStatus != "0"  and DriveEventStatus != "":
            argout = "Status is MOVING"    
        else:
            argout = "Status is STANDBY"
            
      
       
        #----- PROTECTED REGION END -----#	//	CopleyControl.Status
        self.set_status(argout)
        self.__status = PyTango.Device_4Impl.dev_status(self)
        return self.__status
        
    def Read(self):
        """ 
        :rtype: PyTango.DevString
        """
        self.debug_stream("In Read()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.Read) ENABLED START -----#
        print "In ", self.get_name(), "::Read()"
        dev = self.dev
        argout = dev.Read(1) 
        #----- PROTECTED REGION END -----#	//	CopleyControl.Read
        return argout
        
    def Write(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevString
        """
        self.debug_stream("In Write()")
        #----- PROTECTED REGION ID(CopleyControl.Write) ENABLED START -----#
        print argin
        dev = PyTango.DeviceProxy("pyserial/hhl/1")
        dev.Write(argin)
        #----- PROTECTED REGION END -----#	//	CopleyControl.Write
        
    def Stop(self):
        """ 
        """
        self.debug_stream("In Stop()")
        #----- PROTECTED REGION ID(CopleyControl.Stop) ENABLED START -----#
        print "In ", self.get_name(), "::ResetMotors()"
        a = self.attr_NodeID_write
        if a == 0:
            self.Write("r\n")
        else:
            self.Write("{} r\n".format(str(a)))
        self.set_state(PyTango.DevState.STANDBY)
        self.set_status("The status is STANDBY")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Stop
         
    def SendCommandGetResult(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In SendCommandGetResult()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.SendCommandGetResult) ENABLED START -----#
        raw_result = ""
        print "In ", self.get_name(), "::SendCommandGetResult()"
        print argin      
        self.Write(argin)
        while True:         
            data = self.Read()
            if not data: # no data means errors or timeout
                break
            if data == "\n": # LF -> expected
                break
            if data == '\r': # CR -> ignored
                continue     
            raw_result += data
            
        new_result = filter(str.isdigit, raw_result)
        result = ''.join(list(new_result))
  
        if result != '' and result != '033' and result != '33':
            argout = result
            return argout
      
        #----- PROTECTED REGION END -----#	//	CopleyControl.SendCommandGetResult
        return argout
        
    def Move(self):
        """ 
        """
        self.debug_stream("In Move()")
        #----- PROTECTED REGION ID(CopleyControl.Move) ENABLED START -----#
        print "In ", self.get_name(), "::Move()"     
        nodeID = self.attr_NodeID_write
        command = self.setParameterCommand(nodeID, "t", 1)
        self.SendCommandGetResult(command)
        
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Move
        

    #----- PROTECTED REGION ID(CopleyControl.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.programmer_methods

class CopleyControlClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControl.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'Read':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "none"]],
        'Write':
            [[PyTango.DevString, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'SendCommandGetResult':
            [[PyTango.DevString, "none"],
            [PyTango.DevString, "none"]],
        'Move':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Port':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Acceleration':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Position':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Velocity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'NodeID':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Deceleration':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(CopleyControlClass, CopleyControl, 'CopleyControl')
        #----- PROTECTED REGION ID(CopleyControl.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
