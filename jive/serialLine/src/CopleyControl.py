#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        CopleyControl.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      null$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["CopleyControl", "CopleyControlClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(CopleyControl.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	CopleyControl.additionnal_import

# Device States Description
# No states for this device


class CopleyControl (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControl.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        CopleyControl.init_device(self)
        #----- PROTECTED REGION ID(CopleyControl.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(CopleyControl.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Port_read = ""
        self.attr_Timeout_read = 0
        #----- PROTECTED REGION ID(CopleyControl.init_device) ENABLED START -----#        
        self.set_state(PyTango.DevState.ON)
        self.dev= PyTango.DeviceProxy("pyserial/hhl/1")
        self.attr_Port_read = "/dev/ttyS0"
        self.attr_Timeout_read = 0.5
        #----- PROTECTED REGION END -----#	//	Cself.attr_Timeout_read = 0opleyControl.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(CopleyControl.always_executed_hook) ENABLED START -----#
        print "In ", self.get_name(), "::always_excuted_hook()"
        #----- PROTECTED REGION END -----#	//	CopleyControl.always_executed_hook

    # -------------------------------------------------------------------------
    #    CopleyControl read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Port(self, attr):
        self.debug_stream("In read_Port()")
        #----- PROTECTED REGION ID(CopleyControl.Port_read) ENABLED START -----#
        attr.set_value(self.attr_Port_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Port_read
        
    def write_Port(self, attr):
        self.debug_stream("In write_Port()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Port_write) ENABLED START -----#
       
        #----- PROTECTED REGION END -----#	//	CopleyControl.Port_write
        
    def read_Timeout(self, attr):
        self.debug_stream("In read_Timeout()")
        #----- PROTECTED REGION ID(CopleyControl.Timeout_read) ENABLED START -----#
        attr.set_value(self.attr_Timeout_read)
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Timeout_read
        
    def write_Timeout(self, attr):
        self.debug_stream("In write_Timeout()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Timeout_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Timeout_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(CopleyControl.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.read_attr_hardware


    # -------------------------------------------------------------------------
    #    CopleyControl command methods
    # -------------------------------------------------------------------------
    
    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(CopleyControl.State) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()
        
    def dev_status(self):
        """ This command gets the device status (stored in its device_status data member) and returns it to the caller.
        :return: Device status
        :rtype: PyTango.ConstDevString
        """
        self.debug_stream("In dev_status()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.Status) ENABLED START -----#
      
        #----- PROTECTED REGION END -----#	//	CopleyControl.Status
        self.set_status(self.argout)
        self.__status = PyTango.Device_4Impl.dev_status(self)
        return self.__status
        
    def TriggerMotor0(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevLong
        :rtype: PyTango.DevString
        """
        self.debug_stream("In TriggerMotor0()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.TriggerMotor0) ENABLED START -----#
        print "In ", self.get_name(), "::MoveMotor0()"
        self.SetPosition0(argin)
        self.Write('t 1')
        return 's r0xca {}\n t 1'.format(str(argin))
        #----- PROTECTED REGION END -----#	//	CopleyControl.TriggerMotor0
        return argout
        
    def SetPosition0(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In SetPosition0()")
        #----- PROTECTED REGION ID(CopleyControl.SetPosition0) ENABLED START -----#
        print "In ", self.get_name(), "::SendComand()"
        self.Write('s r0xca {}\n'.format(str(argin)))
        #----- PROTECTED REGION END -----#	//	CopleyControl.SetPosition0
        
    def ReadLine(self):
        """ 
        :rtype: PyTango.DevVarCharArray
        """
        self.debug_stream("In ReadLine()")
        argout = [0]
        #----- PROTECTED REGION ID(CopleyControl.ReadLine) ENABLED START -----#
        print "In ", self.get_name(), "::ReadLine()"
        dev = self.dev
        argout = dev.ReadLine()
        print argout
        #----- PROTECTED REGION END -----#	//	CopleyControl.ReadLine
        return argout
        
    def Read(self):
        """ 
        :rtype: PyTango.DevString
        """
        self.debug_stream("In Read()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.Read) ENABLED START -----#
        print "In ", self.get_name(), "::Read()"
        dev = self.dev
        argout = dev.Read(1) 
        #----- PROTECTED REGION END -----#	//	CopleyControl.Read
        return argout
        
    def TriggerMotor2(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevLong
        :rtype: PyTango.DevString
        """
        self.debug_stream("In TriggerMotor2()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.TriggerMotor2) ENABLED START -----#
        print "In ", self.get_name(), "::TriggerMotor2()"
        self.SetPosition2(argin)
        self.Write('2 t 1')
        return '2 s r0xca {}\n 2 t 1'.format(str(argin))
        #----- PROTECTED REGION END -----#	//	CopleyControl.TriggerMotor2
        return argout
        
    def InitMotors(self):
        """ 
        """
        self.debug_stream("In InitMotors()")
        #----- PROTECTED REGION ID(CopleyControl.InitMotors) ENABLED START -----#
        print "In ", self.get_name(), "::InitMotors()"
        self.Write('s r0x24 31\n s r0xC8 257\n 2 s r0x24 31\n 2 s r0xC8 257')
    
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.InitMotors
        
    def Write(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevString
        """
        self.debug_stream("In Write()")
        #----- PROTECTED REGION ID(CopleyControl.Write) ENABLED START -----#
        print "In ", self.get_name(), "::Write()"
        print argin
        dev = self.dev
        dev.Write(argin)
        #----- PROTECTED REGION END -----#	//	CopleyControl.Write
        
    def ResetMotors(self):
        """ 
        """
        self.debug_stream("In ResetMotors()")
        #----- PROTECTED REGION ID(CopleyControl.ResetMotors) ENABLED START -----#
        print "In ", self.get_name(), "::ResetMotors()"
        self.Write("r\n 2 r")
        #----- PROTECTED REGION END -----#	//	CopleyControl.ResetMotors
        
    def DriveCheck0(self):
        """ 
        :rtype: PyTango.DevString
        """
        self.debug_stream("In DriveCheck0()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.DriveCheck0) ENABLED START -----#
        print "In ", self.get_name(), "::DriveCheck0()"
        result = self.SendCommandGetResult("g r0xA0")
        print result
        if result[0:2] != "v ":
            print("Unexpected reply from Copley controller for motor 0")
            return "Unexpected reply from Copley controller for motor 0"
        elif int(result[2:3])  == 0:
            print("Motor0 stopped")
            return "Motor0 stopped"
        else:
            print('Motor0 in motion')
            return 'Motor0 in motion'
       
        #----- PROTECTED REGION END -----#	//	CopleyControl.DriveCheck0
        return argout
        
    def SendCommandGetResult(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In SendCommandGetResult()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.SendCommandGetResult) ENABLED START -----#
        print "In ", self.get_name(), "::SendCommandGetResult()"
        print argin
    
        # send command with LF (line feed)
        self.Write(argin)
        while True:
            # read reply until LF
            data = self.Read()
            if not data: # no data means errors or timeout
                break
            if data == "\n": # LF -> expected
                break
            if data == '\r': # CR -> ignored
                continue     
            
            argout += data
        return argout
        #----- PROTECTED REGION END -----#	//	CopleyControl.SendCommandGetResult
        return argout
        
    def Open(self):
        """ 
        """
        self.debug_stream("In Open()")
        #----- PROTECTED REGION ID(CopleyControl.Open) ENABLED START -----#
        #self.set_state(PyTango.DevState.ON)
        print "In ", self.get_name(), "::Open()"
        dev= self.dev
        dev.Open()
        self.set_state(PyTango.DevState.ON)
        self.set_status("The status is 0N")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Open
        
    def Close(self):
        """ 
        """
        self.debug_stream("In Close()")
        #----- PROTECTED REGION ID(CopleyControl.Close) ENABLED START -----#
        dev= self.dev
        dev.Close()
        self.set_state(PyTango.DevState.OFF)
        self.set_status("The status is 0FF")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Close
        
    def DriveCheck2(self):
        """ 
        :rtype: PyTango.DevString
        """
        self.debug_stream("In DriveCheck2()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.DriveCheck2) ENABLED START -----#
        print "In ", self.get_name(), "::DriveCheck2()"
        result = self.SendCommandGetResult("2 g r0xA0")
        print result
        if result[0:2] != "v ":
            print("Unexpected reply from Copley controller for motor2")
            return "Unexpected reply from Copley controller for motor2 "
        elif int(result[2:3])  == 0:
            print("Motor2 stopped")
            return "Motor2 stopped"
        else:
            print("Motor2 in motion")        
            return 'Motor2 in motion'
       
        #----- PROTECTED REGION END -----#	//	CopleyControl.DriveCheck2
        return argout
        
    def SetPosition2(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In SetPosition2()")
        #----- PROTECTED REGION ID(CopleyControl.SetPosition2) ENABLED START -----#
        print "In ", self.get_name(), "::SetPosition2()"
        self.Write('2 s r0xca {}\n'.format(str(argin)))
        #----- PROTECTED REGION END -----#	//	CopleyControl.SetPosition2
        

    #----- PROTECTED REGION ID(CopleyControl.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.programmer_methods

class CopleyControlClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControl.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'TriggerMotor0':
            [[PyTango.DevLong, "none"],
            [PyTango.DevString, "none"]],
        'SetPosition0':
            [[PyTango.DevLong, "none"],
            [PyTango.DevVoid, "none"]],
        'ReadLine':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVarCharArray, "none"]],
        'Read':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "none"]],
        'TriggerMotor2':
            [[PyTango.DevLong, "none"],
            [PyTango.DevString, "none"]],
        'InitMotors':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Write':
            [[PyTango.DevString, "none"],
            [PyTango.DevVoid, "none"]],
        'ResetMotors':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'DriveCheck0':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "none"]],
        'SendCommandGetResult':
            [[PyTango.DevString, "none"],
            [PyTango.DevString, "none"]],
        'Open':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Close':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'DriveCheck2':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "none"]],
        'SetPosition2':
            [[PyTango.DevLong, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Port':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Timeout':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(CopleyControlClass, CopleyControl, 'CopleyControl')
        #----- PROTECTED REGION ID(CopleyControl.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
